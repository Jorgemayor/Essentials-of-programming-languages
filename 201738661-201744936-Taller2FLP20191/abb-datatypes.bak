#lang eopl
; Taller 2 Fundamentos de lenguaje de programacion
; 
; abb-datatypes.rkt
; 
; Desarrolladores:
; 
; Jorge Eduardo Mayor Fernandez
; Codigo: 201738661
; 
; Juan Sebastian Velasquez Acevedo
; Codigo: 201744936

;-------------------------------------------------------------------------------
;GRAMATIC
;-------------------------------------------------------------------------------

;<treeType> ::= (empty-treeType)
;           ::= (<int> <treeType> <treeType>)

;-------------------------------------------------------------------------------
;DATATYPES
;-------------------------------------------------------------------------------

;The datatype "treeType" is defined, with the constructors
;"empty-treeType"; that defines an empty tree and "node"; that
;defines a treeType with branches, that are also treeTypes.
;Treetype defined an abstract syntax tree.
;treeType?: Validates if the given data is a treeType.
(define-datatype treeType treeType?
  (empty-treeType)
  (node (value number?)
        (treeIzq treeType?)
        (treeDer treeType?))
  )

;-------------------------------------------------------------------------------

;TreeType instantiations
(define treeType1 (node 3 (empty-treeType) (empty-treeType)))

(define treeType2 (node 3 (node -1 (node -3 (empty-treeType)
                                      (node 3 (empty-treeType)
                                            (empty-treeType)))
                             (node 0 (empty-treeType)
                                   (empty-treeType)))
                     (node 3 (empty-treeType)
                           (empty-treeType))))

(define treeType3 (node 3 (node -1 (node -3 (empty-treeType)
                                      (node -2 (empty-treeType)
                                            (empty-treeType)))
                             (node 0 (empty-treeType)
                                   (empty-treeType)))
                     (node 3 (empty-treeType)
                           (empty-treeType))))

;Pruebas treeType?
(treeType? (empty-treeType))
(treeType? treeType1)
(treeType? treeType2)

;-------------------------------------------------------------------------------

;empty-treeType?: tree {treeType}
;                 -> {boolean}
;Purpose:
;Returns true if a treeType is an empty-treeType (with no nodes),
;false otherwise.
(define empty-treeType?
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      #t)
      (node (value treeIzq treeDer)
            #f))
    )
  )

;Pruebas
(empty-treeType? (empty-treeType))
(empty-treeType? treeType1)

;-------------------------------------------------------------------------------

;extract-node: tree {treeType}
;              -> {boolean} | {string}
;Purpose:
;Returns the node of the given treeType.
;If the tree is an empty-treeType, returns "The tree is null".
(define extract-node
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      "The tree is null")
      (node (value treeIzq treeDer)
            value))
    )
  )

;Pruebas
(extract-node treeType1)
(extract-node treeType2)
(extract-node treeType3)

;-------------------------------------------------------------------------------

;extract-izq: tree {treeType}
;             -> {boolean} | {string}
;Purpose:
;Returns the left branch of the given treeType.
;If the tree is an empty-treeType, returns "The tree is null".
(define extract-izq
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      "The tree is null")
      (node (value treeIzq treeDer)
            treeIzq))
    )
  )

;Pruebas
(extract-izq treeType1)
(extract-izq treeType2)

;-------------------------------------------------------------------------------

;extract-der: tree {treeType}
;             -> {boolean} | {string}
;Purpose:
;Returns the right branch of the given treeType.
;If the tree is an empty-treeType, returns "The tree is null".
(define extract-der
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      "The tree is null")
      (node (value treeIzq treeDer)
            treeDer))
    )
  )

;Pruebas
(extract-der treeType1)
(extract-der treeType2)

;-------------------------------------------------------------------------------

;leaf-tree?: tree {treeType}
;            -> {boolean}
;Purpose:
;Returns true if the given treeType is a leaf, false
;otherwise.
;An empty-treeType is not taken as a leaf.
(define leaf-tree?
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      #f)
      (node (value treeIzq treeDer)
            (cond [(and (empty-treeType? treeIzq)
                        (empty-treeType? treeDer)) #t]
                  [else #f]))
      )
    )
  )

;Pruebas
(leaf-tree? treeType1)
(leaf-tree? treeType3)

;-------------------------------------------------------------------------------
;node-tree?: tree {treeType}
;            -> {boolean}
;Purpose:
;Returns true if the given treeType is a node, false
;otherwise.
;If a treeType has at least one treeType on its
;branches, is taken as a node.
(define node-tree?
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      #f)
      (node (value treeIzq treeDer)
            (cond [(or (empty-treeType? treeIzq)
                       (empty-treeType? treeDer)) #f]
                  [else #t]))
      )
    )
  )

;Pruebas
(node-tree? treeType1)
(node-tree? treeType3)

;-------------------------------------------------------------------------------
;validador-orden: tree {treeType}
;                 -> {boolean}
;Purpose:
;Validates if the given treeType is a well ordered tree, so all the values on the left
;branch of a treeType must be smaller than the value in the node.
;The values on the left branch must be bigger than the value in the node.
;At first, the function transforms the treeType into a list and then, validates the
;order of the numbers in this list.
(define validador-orden
  (lambda (tree)
    (letrec ([treeToList (lambda (tree)
                           (cases treeType tree
                             (empty-treeType ()
                                             empty)
                             (node (value treeIzq treeDer)
                                   (append (treeToList treeIzq) (list value) (treeToList treeDer)))
                             )
                           )]
             [validar-orden (lambda (lista)
                              (cond [(or (null? lista)
                                         (null? (cdr lista))) #t]
                                    [else (and (<= (car lista) (cadr lista))
                                               (validar-orden (cdr lista)))])
                              )]
             [main (validar-orden (treeToList tree))])
      main)
    )
  )

;Pruebas
(validador-orden treeType1)
(validador-orden treeType2)
(validador-orden treeType3)

;-------------------------------------------------------------------------------
;unparseTree: tree {treeType}
;             -> {list}
;Purpose:
;Takes a treeType and unparses it into a list, analyzing
;each case of the gramatic.
(define unparseTree
  (lambda (tree)
    (cases treeType tree
      (empty-treeType ()
                      '(emptyTreeList))
      (node (value treeIzq treeDer)
            (list 'value value 'leftTree (unparseTree treeIzq) 'rightTree (unparseTree treeDer))))
    )
  )

;Pruebas
(unparseTree treeType1)
(unparseTree treeType2)
(unparseTree treeType3)

;-------------------------------------------------------------------------------
;parseTree: dato {list}
;           -> {treeType}
;Purpose:
;Takes a list and parses it into an abstract syntax tree,
;defined by treeType; analyzing if the given list fixes with
;the definition of the datatype.
(define parseTree
  (lambda (dato)
    (if (or  (eqv? (car dato) 'emptyTreeList)
             (and (not (null? dato))
                  (not (null? (cdr dato)))
                  (not (null? (cddr dato)))
                  (not (null? (cdddr dato)))
                  (not (null? (cddddr dato)))
                  (not (null? (cddr (cdddr dato))))
                  (null? (cdddr (cdddr dato)))))
        (cond
          [(eqv? (car dato) 'emptyTreeList) (empty-treeType)]
          [(and (eqv? (car dato) 'value)
                (eqv? (caddr dato) 'leftTree)
                (eqv? (caddr (cddr dato)) 'rightTree))
           (node
            (cadr dato)
            (parseTree (caddr (cdr dato)))
            (parseTree (caddr (cdddr dato))))]
          [else 'Invalido])
        'Invalido)
    )
  )

;Pruebas
(parseTree (unparseTree treeType1))
(parseTree (unparseTree treeType2))
(parseTree (unparseTree treeType3))